package com.assignment.orm.service.orm_final_course_work_health_care.Controllers;

import com.assignment.orm.service.orm_final_course_work_health_care.BO.BoFactory;
import com.assignment.orm.service.orm_final_course_work_health_care.BO.Custom.PatientBo;
import com.assignment.orm.service.orm_final_course_work_health_care.BO.Custom.ProgramDetailsBo;
import com.assignment.orm.service.orm_final_course_work_health_care.BO.Custom.TherapyProgramBo;
import com.assignment.orm.service.orm_final_course_work_health_care.DTO.PatientDto;
import com.assignment.orm.service.orm_final_course_work_health_care.DTO.ProgramDetailsDto;
import com.assignment.orm.service.orm_final_course_work_health_care.DTO.TM.ProgramDetailsTm;
import com.assignment.orm.service.orm_final_course_work_health_care.DTO.TherapyProgramDto;
import com.assignment.orm.service.orm_final_course_work_health_care.Entity.ProgramDetails;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseEvent;
import org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl;

import java.net.URL;
import java.sql.Date;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.ResourceBundle;



public class AssignProgramController implements Initializable {

    public Label lbDate;
    public TableColumn colProgramFee;
    public TableColumn colRegisterDate;
    public Label lbProgramFee;
    @FXML
    private Button btnAssign;

    @FXML
    private Button btnDelete;

    @FXML
    private ComboBox<String> cmbPatientName;

    @FXML
    private ComboBox<String> cmbProgramName;

    @FXML
    private TableColumn<ProgramDetailsTm, String> colPatientId;

    @FXML
    private TableColumn<ProgramDetailsTm, String> colProgramId;

    @FXML
    private TableColumn<ProgramDetailsTm, String> colProgramName;

    @FXML
    private Label lbPatientId;

    @FXML
    private Label lbProgramId;

    @FXML
    private TableView<ProgramDetailsTm> tblAssignments;

    ProgramDetailsBo programDetailsBo = BoFactory.getInstance().getBo(BoFactory.BoType.PROGRAM_DETAILS);
    PatientBo patientBo = BoFactory.getInstance().getBo(BoFactory.BoType.PATIENT);
    TherapyProgramBo therapyProgramBo = BoFactory.getInstance().getBo(BoFactory.BoType.THERAPY_PROGRAM);


    @FXML
    void btnAssignOnAction(ActionEvent event) throws Exception {
        String patientId = lbPatientId.getText();
        String programId = lbProgramId.getText();
        double programFee = Double.parseDouble(lbProgramFee.getText());
        Date registerDate = Date.valueOf(lbDate.getText());

        boolean isAssigned = programDetailsBo.save(programId,patientId, programFee, registerDate);

        if (isAssigned) {
            new Alert(Alert.AlertType.INFORMATION, "Program assigned successfully").showAndWait();
            reset();
        } else {
            new Alert(Alert.AlertType.ERROR, "Failed to assign program").showAndWait();
        }
    }

    @FXML
    void btnDeleteOnAction(ActionEvent event) throws Exception {
        String programId = lbProgramId.getText();
        String patientId = lbPatientId.getText();

        boolean isDeleted = programDetailsBo.delete(patientId, programId);

        if (isDeleted) {
            new Alert(Alert.AlertType.INFORMATION, "Program deleted successfully").showAndWait();
            reset();
        } else {
            new Alert(Alert.AlertType.ERROR, "Failed to delete program").showAndWait();
        }
    }

    @FXML
    void cmbPatientNameOnAction(ActionEvent event) throws SQLException {
        String therapistName = cmbPatientName.getSelectionModel().getSelectedItem();

        if (therapistName == null || therapistName.isEmpty()) {
            return;
        }

        PatientDto patientDto = patientBo.findByName(therapistName);


        if (patientDto == null){
            return;
        }

        lbPatientId.setText(patientDto.getP_id());

    }

    @FXML
    void cmbProgramNameOnAction(ActionEvent event) throws SQLException {
        String programName = cmbProgramName.getSelectionModel().getSelectedItem();

        if (programName == null || programName.isEmpty()) {
            return;
        }

        TherapyProgramDto therapyProgramDto = therapyProgramBo.findByName(programName);

        if (therapyProgramDto == null){
            return;
        }

        lbProgramId.setText(therapyProgramDto.getT_id());
        lbProgramFee.setText(String.valueOf(therapyProgramDto.getFee()));

    }

    @FXML
    void tblAssignmentsOnMouseClicked(MouseEvent event) {
        ProgramDetailsTm therapistTherapyProgramTm = tblAssignments.getSelectionModel().getSelectedItem();

        if (therapistTherapyProgramTm != null){
            lbProgramId.setText(therapistTherapyProgramTm.getTherapyProgram());
            lbPatientId.setText(therapistTherapyProgramTm.getPatient());
        }

        btnAssign.setDisable(true);
        btnDelete.setDisable(false);
    }

    void reset() throws Exception {
        loadTableData();

        lbProgramId.setText("");
        lbPatientId.setText("");
        lbProgramFee.setText("");
        cmbProgramName.setValue("");
        cmbPatientName.setValue("");

        btnAssign.setDisable(false);
        btnDelete.setDisable(true);
    }

    void loadTableData() throws Exception {

        ArrayList<ProgramDetailsDto> therapistTherapyProgramDtos = programDetailsBo.getAll();

        ObservableList<ProgramDetailsTm> therapistTherapyProgramTms = FXCollections.observableArrayList();

        for (ProgramDetailsDto therapistTherapyProgramDto : therapistTherapyProgramDtos) {
            ProgramDetailsTm therapistTherapyProgramTm = new ProgramDetailsTm();
            therapistTherapyProgramTm.setPatient(therapistTherapyProgramDto.getPatient());
            therapistTherapyProgramTm.setTherapyProgram(therapistTherapyProgramDto.getTherapyProgram());
            therapistTherapyProgramTm.setTherapyProgramName(therapistTherapyProgramDto.getTherapyProgramName());
            therapistTherapyProgramTm.setFee(String.valueOf(therapistTherapyProgramDto.getCurrentPaymentStatus()));
            therapistTherapyProgramTm.setRegisterDate(therapistTherapyProgramDto.getRegisterDate());

            therapistTherapyProgramTms.add(therapistTherapyProgramTm);
        }

        tblAssignments.setItems(therapistTherapyProgramTms);



    }

    void LoadPatientId() throws SQLException {
        ArrayList<PatientDto> patientDtos = patientBo.getAll();

        ArrayList<String> patientIds = new ArrayList<>();

        for (PatientDto patientDto : patientDtos) {
            patientIds.add(patientDto.getName());
        }

        ObservableList<String> therapists = FXCollections.observableArrayList(patientIds);
        cmbPatientName.setItems(therapists);
    }

    void LoadProgramId() throws SQLException {
        ArrayList<TherapyProgramDto> therapyProgramDtos = therapyProgramBo.getAll();

        ArrayList<String> thrapyProgramIds = new ArrayList<>();

        for (TherapyProgramDto therapyProgramDto : therapyProgramDtos) {
            thrapyProgramIds.add(therapyProgramDto.getName());
        }

        ObservableList<String> therapyProgramsId = FXCollections.observableArrayList(thrapyProgramIds);
        cmbProgramName.setItems(therapyProgramsId);
    }
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
            colPatientId.setCellValueFactory(new PropertyValueFactory<>("patient"));
            colProgramId.setCellValueFactory(new PropertyValueFactory<>("therapyProgram"));
            colProgramName.setCellValueFactory(new PropertyValueFactory<>("therapyProgramName"));
            colProgramFee.setCellValueFactory(new PropertyValueFactory<>("fee"));
            colRegisterDate.setCellValueFactory(new PropertyValueFactory<>("registerDate"));

            try{
                lbDate.setText(LocalDate.now().toString());
            reset();
            LoadPatientId();
            LoadProgramId();
            }catch (Exception e) {
                throw new RuntimeException(e);
            }
    }
}
